name: "Pull Request Docs Check"
on: 
- pull_request

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: ammaraskar/sphinx-action@master
      with:
        docs-folder: "docs/"

# name: Pull Request Docs Check

# on: [pull_request]

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - run: wget -qO- https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba;
#     - run: ./bin/micromamba shell init -s bash -p ~/micromamba
#     - run: source ~/.bashrc
#     - run: which micromamba
#     - run: micromamba activate
#     - run: micromamba install python -c conda-forge
#     - uses: actions/checkout@v1
#     # Standard drop-in approach that should work for most people.
#     - uses: ammaraskar/sphinx-action@master
#       with:
#         run: echo "******************* ammaraskar/sphinx-action@master ***************"
#         docs-folder: "docs/"
#     # # Example of using a custom build-command.
#     # - uses: ammaraskar/sphinx-action@master
#     #   with:
#     #     build-command: "sphinx-build -b html . _build"
#     #     docs-folder: "docs2/"
#     # Grabbing custom dependencies and building as a pdf.
#     # - uses: ammaraskar/sphinx-action@master
#     #   with:
#     #     pre-build-command: "apt-get update -y && apt-get install -y latexmk texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended"
#     #     build-command: "make latexpdf"
#     #     docs-folder: "docs2/"
#     # Great extra actions to compose with:
#     # Create an artifact of the html output.
#     - uses: actions/upload-artifact@v1
#       with:
#         name: DocumentationHTML
#         path: docs/_build/html/
#     # Create an artifact out of the previously built pdf.
#     # - uses: actions/upload-artifact@v1
#     #   with:
#     #     name: Documentation
#     #     path: docs2/_build/latex/pdfexample.pdf
